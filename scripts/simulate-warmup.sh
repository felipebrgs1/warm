#!/bin/bash

# WhatsApp Warm-up Simulation Script
# Este script demonstra o fluxo completo de warm-up

echo "üöÄ Iniciando Simula√ß√£o de Warm-up WhatsApp"
echo "=========================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

API_URL="http://localhost:3000/api/whatsapp"
INSTANCE_NAME="warmup-instance"

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se o servidor est√° rodando
check_server() {
    log "Verificando se o servidor est√° rodando..."
    
    if curl -s http://localhost:3000/health > /dev/null; then
        log "‚úÖ Servidor est√° rodando"
        return 0
    else
        error "‚ùå Servidor n√£o est√° rodando. Inicie com 'npm run dev'"
        return 1
    fi
}

# Criar inst√¢ncia
create_instance() {
    log "üì± Criando inst√¢ncia WhatsApp..."
    
    response=$(curl -s -X POST "$API_URL/instance/create" \
        -H "Content-Type: application/json" \
        -d "{\"instanceName\": \"$INSTANCE_NAME\"}")
    
    if echo "$response" | grep -q "instance"; then
        log "‚úÖ Inst√¢ncia criada com sucesso"
        echo "$response" | jq . 2>/dev/null || echo "$response"
    else
        error "‚ùå Falha ao criar inst√¢ncia"
        echo "$response"
        return 1
    fi
}

# Verificar status
check_status() {
    log "üìä Verificando status da inst√¢ncia..."
    
    response=$(curl -s "$API_URL/instance/$INSTANCE_NAME/status")
    
    echo "Status atual:"
    echo "$response" | jq . 2>/dev/null || echo "$response"
    
    local is_connected=$(echo "$response" | jq -r '.isConnected // false')
    
    if [ "$is_connected" = "true" ]; then
        log "‚úÖ Inst√¢ncia conectada"
        return 0
    else
        warn "‚ö†Ô∏è  Inst√¢ncia n√£o conectada (QR code necess√°rio)"
        return 1
    fi
}

# Enviar mensagens de teste
send_test_messages() {
    log "üì§ Enviando mensagens de teste (Est√°gio 1)..."
    
    local messages=(
        "Bom dia! Teste inicial do sistema."
        "Ol√°! Verificando conectividade WhatsApp."
        "Oi! Mensagem de warm-up em andamento."
        "Hello! Teste de entrega de mensagens."
        "Oi! √öltima mensagem de teste do dia."
    )
    
    local contacts=(
        "5511988887777"
        "5511977776666"
        "5511966665555"
        "5511955554444"
        "5511944443333"
    )
    
    for i in "${!messages[@]}"; do
        log "Enviando mensagem $((i+1))/5 para ${contacts[$i]}"
        
        response=$(curl -s -X POST "$API_URL/message/send/$INSTANCE_NAME" \
            -H "Content-Type: application/json" \
            -d "{\"number\": \"${contacts[$i]}\", \"text\": \"${messages[$i]}\"}")
        
        if echo "$response" | grep -q "success.*true"; then
            log "‚úÖ Mensagem $((i+1)) enviada"
        else
            error "‚ùå Falha ao enviar mensagem $((i+1))"
            echo "$response"
        fi
        
        sleep 2
    done
}

# Simular est√°gio 2 - aumento gradual
simulate_stage2() {
    log "üìà Simulando Est√°gio 2: Aumento Gradual..."
    
    local extended_messages=(
        "Bom dia! Como voc√™ est√° hoje?"
        "Testando diferentes conte√∫dos."
        "Ol√°! Mensagem diversificada."
        "Oi! Verificando entregabilidade."
        "Boa tarde! Testando hor√°rios."
        "Hello! More diverse content."
        "Oi! Mensagem com varia√ß√£o."
        "Bom dia! Teste de consist√™ncia."
        "Ol√°! Monitorando envios."
        "Hi! Testing message patterns."
        "Oi! Conte√∫do variado enviado."
        "Bom dia! √öltimas mensagens do dia."
    )
    
    for i in "${!extended_messages[@]}"; do
        local contact_index=$((i % 5))
        local contact="55119$((88887777 - contact_index * 1111111))"
        
        log "Enviando mensagem estagiada $((i+1))/12"
        
        curl -s -X POST "$API_URL/message/send/$INSTANCE_NAME" \
            -H "Content-Type: application/json" \
            -d "{\"number\": \"$contact\", \"text\": \"${extended_messages[$i]}\"}" > /dev/null
        
        sleep 3
    done
    
    log "‚úÖ Est√°gio 2 conclu√≠do: 12 mensagens enviadas"
}

# Buscar mensagens recebidas
check_received_messages() {
    log "üì• Verificando mensagens recebidas..."
    
    response=$(curl -s "$API_URL/messages/$INSTANCE_NAME?limit=10")
    
    local count=$(echo "$response" | jq -r '.count // 0')
    log "üìä Total de mensagens: $count"
    
    if [ "$count" -gt 0 ]; then
        log "üìã √öltimas mensagens:"
        echo "$response" | jq -r '.messages[].message.conversation // "M√≠dia"' 2>/dev/null | head -5
    fi
}

# Menu principal
show_menu() {
    echo ""
    echo "üì± WhatsApp Warm-up - Menu de Simula√ß√£o"
    echo "======================================"
    echo "1. Verificar status do servidor"
    echo "2. Criar nova inst√¢ncia"
    echo "3. Verificar status da inst√¢ncia"
    echo "4. Enviar mensagens de teste (Est√°gio 1)"
    echo "5. Simular aumento gradual (Est√°gio 2)"
    echo "6. Verificar mensagens recebidas"
    echo "7. Executar simula√ß√£o completa"
    echo "8. Sair"
    echo ""
    read -p "Escolha uma op√ß√£o: " choice
}

# Simula√ß√£o completa
run_complete_simulation() {
    log "üéØ Executando simula√ß√£o completa..."
    
    check_server || return 1
    create_instance
    sleep 2
    check_status
    sleep 2
    send_test_messages
    sleep 5
    simulate_stage2
    sleep 3
    check_received_messages
    
    log "üéâ Simula√ß√£o completa finalizada!"
    log ""
    log "üìä Resumo:"
    log "   ‚úÖ Inst√¢ncia criada e configurada"
    log "   ‚úÖ 5 mensagens de teste (Est√°gio 1)"
    log "   ‚úÖ 12 mensagens de aumento gradual (Est√°gio 2)"
    log "   ‚úÖ Total: 17 mensagens enviadas"
}

# Loop principal
main() {
    # Verificar depend√™ncias
    if ! command -v curl &> /dev/null; then
        error "curl √© necess√°rio para executar este script"
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        warn "jq n√£o encontrado. Instale para melhor formata√ß√£o JSON: sudo apt install jq"
    fi
    
    while true; do
        show_menu
        
        case $choice in
            1) check_server ;;
            2) create_instance ;;
            3) check_status ;;
            4) send_test_messages ;;
            5) simulate_stage2 ;;
            6) check_received_messages ;;
            7) run_complete_simulation ;;
            8) 
                log "üëã Saindo..."
                exit 0
                ;;
            *) 
                error "Op√ß√£o inv√°lida"
                ;;
        esac
        
        echo ""
        read -p "Pressione Enter para continuar..."
    done
}

# Executar se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi