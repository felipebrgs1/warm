import { EvolutionApiService } from '../services/evolution-api.js';
import { logger } from '../utils/logger.js';

class WhatsAppWarmupSimulator {
  private evolutionService: EvolutionApiService;
  private instanceName: string;

  constructor(instanceName: string) {
    this.evolutionService = new EvolutionApiService();
    this.instanceName = instanceName;
  }

  async simulateCompleteWarmup() {
    logger.info('üöÄ Iniciando simula√ß√£o completa do warm-up WhatsApp');

    try {
      // Etapa 1: Setup e Valida√ß√£o
      await this.setupAndValidate();
      
      // Etapa 2: Envio Limitado
      await this.stage1LimitedSending();
      
      // Etapa 3: Aumento Gradual
      await this.stage2GradualIncrease();
      
      // Etapa 4: Conversas Naturais
      await this.stage3NaturalConversations();
      
      logger.info('‚úÖ Simula√ß√£o de warm-up conclu√≠da com sucesso!');
      
    } catch (error) {
      logger.error('‚ùå Erro na simula√ß√£o:', error);
    }
  }

  private async setupAndValidate() {
    logger.info('üì± Etapa 1: Setup e Valida√ß√µes Iniciais');
    
    // Criar inst√¢ncia
    logger.info('Criando inst√¢ncia WhatsApp...');
    const instance = await this.evolutionService.createInstance(this.instanceName);
    logger.info('Inst√¢ncia criada:', { instance: instance.instance, status: instance.status });

    // Simular conex√£o (na pr√°tica, usu√°rio precisaria escanear QR code)
    logger.info('Simulando conex√£o com QR code...');
    await this.delay(3000);
    
    // Verificar status
    logger.info('Verificando status de conex√£o...');
    const status = await this.evolutionService.getInstance(this.instanceName);
    logger.info('Status:', { status: status.status, connectionState: status.connectionState });
  }

  private async stage1LimitedSending() {
    logger.info('üìä Etapa 2: Envio Muito Limitado (5 mensagens/dia)');
    
    const contacts = [
      '5511988887777',
      '5511977776666', 
      '5511966665555',
      '5511955554444',
      '5511944443333'
    ];

    const messages = [
      'Bom dia! Testando o nosso sistema de comunica√ß√£o.',
      'Ol√°, tudo bem? Verificando o envio de mensagens.',
      'Oi, este √© um teste de warm-up do nosso n√∫mero.',
      'Hello! Testando a conectividade do WhatsApp.',
      'Oi pessoal, mensagem de teste da equipe.'
    ];

    for (let i = 0; i < contacts.length; i++) {
      logger.info(`Enviando mensagem ${i + 1}/5 para ${contacts[i]}`);
      
      try {
        await this.evolutionService.sendMessage(this.instanceName, {
          number: contacts[i],
          text: messages[i],
          delay: 2000
        });
        
        logger.info(`‚úÖ Mensagem ${i + 1} enviada com sucesso`);
        
        // Simular resposta (no mundo real, viria via webhook)
        await this.simulateResponse(contacts[i]);
        
        // Delay entre mensagens
        await this.delay(5000);
        
      } catch (error) {
        logger.error(`‚ùå Erro ao enviar mensagem ${i + 1}:`, error);
      }
    }
    
    logger.info('üìà Est√°gio 1 conclu√≠do: 5 mensagens enviadas');
  }

  private async stage2GradualIncrease() {
    logger.info('üìà Etapa 3: Aumento Gradual e Diversifica√ß√£o (10-15 mensagens/dia)');
    
    const extendedContacts = [
      '5511988887777', '5511977776666', '5511966665555',
      '5511955554444', '5511944443333', '5511933332222',
      '5511922221111', '5511911110000'
    ];

    const diverseMessages = [
      'Bom dia! Como voc√™ est√°?',
      'Testando nosso sistema com diferentes tipos de conte√∫do.',
      'Ol√°! Mensagem de teste n√∫mero 2 do dia.',
      'Oi, tudo bem? Verificando a entrega.',
      'Boa tarde! Testando hor√°rios diferentes.',
      'Hello! Another test message.',
      'Oi, mensagem de diversifica√ß√£o de conte√∫do.',
      'Bom dia! Testando varia√ß√µes de texto.',
      'Ol√°! Verificando consist√™ncia de envio.',
      'Hi! Testing message delivery.',
      'Oi, mensagem teste para monitoramento.',
      'Bom dia! Mais um teste de warm-up.',
      'Ol√°! Ajustando par√¢metros de envio.',
      'Hi! Final test messages for today.'
    ];

    for (let i = 0; i < 12; i++) {
      const contactIndex = i % extendedContacts.length;
      logger.info(`Enviando mensagem ${i + 1}/12 para ${extendedContacts[contactIndex]}`);
      
      try {
        await this.evolutionService.sendMessage(this.instanceName, {
          number: extendedContacts[contactIndex],
          text: diverseMessages[i],
          delay: 1500
        });
        
        logger.info(`‚úÖ Mensagem ${i + 1} enviada`);
        
        // 20% chance de enviar m√≠dia
        if (Math.random() < 0.2) {
          logger.info('üìé Enviando m√≠dia adicional...');
          await this.evolutionService.sendMedia(this.instanceName, {
            number: extendedContacts[contactIndex],
            mediatype: 'image',
            media: 'https://via.placeholder.com/400x300.png?text=Test+Image',
            caption: 'Imagem de teste'
          });
        }
        
        await this.delay(4000);
        
      } catch (error) {
        logger.error(`‚ùå Erro no envio ${i + 1}:`, error);
      }
    }
    
    logger.info('üìä Est√°gio 2 conclu√≠do: 12 mensagens enviadas');
  }

  private async stage3NaturalConversations() {
    logger.info('üîÑ Etapa 4: Simula√ß√£o de Conversas Naturais (30 mensagens/dia)');
    
    const contacts = [
      '5511988887777', '5511977776666', '5511966665555'
    ];

    const conversationFlows = [
      // Manh√£
      [
        'Bom dia! Como foi sua noite?',
        'Tudo bem para hoje?',
        'Lembrete: reuni√£o √†s 10h'
      ],
      // Tarde  
      [
        'Boa tarde! Alguma atualiza√ß√£o?',
        'Oi, verificando o andamento',
        'Tudo certo por a√≠?'
      ],
      // Noite
      [
        'Boa noite! Finalizando o dia',
        'Como foram as atividades?',
        'At√© amanh√£!'
      ]
    ];

    const timesOfDay = ['manh√£', 'tarde', 'noite'];
    
    for (let day = 0; day < 3; day++) {
      logger.info(`üìÖ Dia ${day + 1} do Est√°gio 4`);
      
      for (let timeIndex = 0; timeIndex < timesOfDay.length; timeIndex++) {
        logger.info(`üïê Enviando mensagens da ${timesOfDay[timeIndex]}`);
        
        for (let contactIndex = 0; contactIndex < contacts.length; contactIndex++) {
          const flow = conversationFlows[timeIndex];
          
          for (let msgIndex = 0; msgIndex < flow.length; msgIndex++) {
            logger.info(`Enviando para ${contacts[contactIndex]}: ${flow[msgIndex]}`);
            
            try {
              await this.evolutionService.sendMessage(this.instanceName, {
                number: contacts[contactIndex],
                text: flow[msgIndex],
                delay: 1000
              });
              
              // Simular resposta r√°pida
              await this.delay(2000);
              await this.simulateQuickResponse(contacts[contactIndex]);
              
              await this.delay(3000);
              
            } catch (error) {
              logger.error('‚ùå Erro no envio:', error);
            }
          }
        }
        
        // Intervalo entre per√≠odos do dia
        await this.delay(10000);
      }
      
      logger.info(`‚úÖ Dia ${day + 1} conclu√≠do`);
    }
    
    logger.info('üéØ Est√°gio 4 conclu√≠do: Conversas naturais simuladas');
  }

  private async simulateResponse(phone: string) {
    logger.info(`üì® Simulando resposta de ${phone}...`);
    // Na pr√°tica, esta resposta viria via webhook
    await this.delay(1000);
  }

  private async simulateQuickResponse(phone: string) {
    logger.info(`‚ö° Simulando resposta r√°pida de ${phone}...`);
    // Simular resposta r√°pida para conversas naturais
    await this.delay(500);
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Fun√ß√£o para executar a simula√ß√£o
export async function runWarmupSimulation() {
  const simulator = new WhatsAppWarmupSimulator('warmup-instance');
  await simulator.simulateCompleteWarmup();
}

// Executar se chamado diretamente
if (require.main === module) {
  runWarmupSimulation().catch(console.error);
}